/*
 * generated by Xtext 2.14.0
 */
package fr.ut2j.m1ice.fsm.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.ut2j.m1ice.fsm.FSM

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TextEditorGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var fsm = resource.contents.get(0) as FSM
		fsa.generateFile("FSM.java",generateFSM());
		fsa.generateFile("Etat.java",generateStateInterface());
		fsa.generateFile("EtatOn.java",generateStateOn());
		fsa.generateFile("EtatOff.java",generateStateOff());
		fsa.generateFile("EtatFinal.java",generateStateFinal());
		fsa.generateFile("Transaction.java",generateTransition());

	}
	
	def generateStateInterface()
	{
		var str="
				public interface Etat {
				    String name = '';
				    public String display();
				
				}
				";
		return str;
	}
	
	def generateStateOn()
	{
		var str="
public class EtatOn implements Etat{
    String name;
    public EtatOn(String name)
    {
        this.name = name;
    }
    public String display()
    {
       return  this.name+' Etat On';
    }
}";
		return str;
	}
	
	def generateStateOff()
	{
		var str="
public class EtatOff implements Etat{
    String name;
    public EtatOn(String name)
    {
        this.name = name;
    }
    public String display()
    {
       return  this.name+' Etat Off';
    }
}";
		return str;
	}
	
	def generateStateFinal()
	{
		var str="
public class EtatFinal implements Etat{

    @Override
    public String display() {
        return 'Etat Final';
    }
}";
		return str;
	}
	
	def generateTransition()
	{
		var str="
public class Transaction {
    Etat s1;
    Etat s2;

    public Transaction(Etat OldEtat, Etat NewEtat)
    {
        this.s1 = OldEtat;
        this.s2 = NewEtat;
    }

    public String display()
    {
        return this.s1.name+' => '+this.s2.name;
    }
}
				";
		return str;
	}
	def generateFSM(){
		var str="import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
public class FSM {

    Etat currentState;
    List<Transaction> listTransaction;

    public FSM ()
    {
        this.currentState = new EtatOn('initial');
        this.listTransaction = new ArrayList<Transaction>();
    }

    public static void main(String[] args) {
	// write your code here
        FSM fsm = new FSM();

        System.out.println('toto');
        String toto ='';
        while(toto != 'quit')
        {
                toto=fsm.displayMenu();
                switch (toto){
                    case 'display':
                        fsm.displayCurrentState();
                        break;
                    case  'on':
                        fsm.setToOnCurrentState();
                        break;
                    case 'off':
                        fsm.setToOffCurrentState();
                        break;
                    case 'quit':
                        if(fsm.handleQuit())
                        {
                            fsm.currentState = new EtatFinal();
                            fsm.displayCurrentState();
                            System.exit(0);
                        }
                        else
                        {
                            System.out.println('Current State not at Off');
                        }
                }
        }
    }

    private boolean handleQuit() {
        return this.currentState.display().indexOf('Off') != -1;
    }

    private void setToOnCurrentState() {
        EtatOn state = new EtatOn('s1');
        Transaction t1 = new Transaction(this.currentState,state);
        System.out.println(t1);
        this.listTransaction.add(t1);
        this.currentState = state;

    }

    private void setToOffCurrentState() {
        EtatOff state = new EtatOff('s2');
        Transaction t1 = new Transaction(this.currentState,state);
        System.out.println(t1);
        this.listTransaction.add(t1);
        this.currentState = state;
    }

    private void displayCurrentState() {
        System.out.println('Current State : '+this.currentState.display());
    }

    public String displayMenu(){

        System.out.println('display menu');
        boolean saisieOk = false;
        Scanner choiceUser = new Scanner(System.in);
        String valueUser = '';
        while(saisieOk == false)
        {
            System.out.println('//////////////////////////////////////////////////////');
            System.out.println('                       Menu                            ');
            System.out.println('    - on   |passe la machine a état dans l'Etat on');
            System.out.println('    - off  |passe la machine a état dans l'Etat off');
            System.out.println('    - display | display l'état Actuel de la machine a Etat');
            System.out.println('    - quit | display l'état Actuel de la machine a Etat');
            System.out.println('Your choice  ?');
            System.out.println('///////////////////////////////////////////////////////');
            System.out.println('>');
            valueUser = choiceUser.nextLine();
            switch (valueUser){
                case 'on':
                    saisieOk = true;
                    break;
                case 'off':
                    saisieOk = true;
                    break;
                case 'display':
                    saisieOk = true;
                    break;
                case 'quit':
                    saisieOk = true;
                    break;
                default:
                    System.out.println('Error enter a value displayed on the menu');
                    break;
            }
        }
        return  valueUser;
    }
}"
		return str;
	}
}
