/*
 * generated by Xtext 2.14.0
 */
grammar InternalTextEditor;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.ut2j.m1ice.fsm.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.ut2j.m1ice.fsm.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.ut2j.m1ice.fsm.services.TextEditorGrammarAccess;

}
@parser::members {
	private TextEditorGrammarAccess grammarAccess;

	public void setGrammarAccess(TextEditorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFSM
entryRuleFSM
:
{ before(grammarAccess.getFSMRule()); }
	 ruleFSM
{ after(grammarAccess.getFSMRule()); } 
	 EOF 
;

// Rule FSM
ruleFSM 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFSMAccess().getGroup()); }
		(rule__FSM__Group__0)
		{ after(grammarAccess.getFSMAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getAlternatives()); }
		(rule__State__Alternatives)
		{ after(grammarAccess.getStateAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransition
entryRuleTransition
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransitionAccess().getGroup()); }
		(rule__Transition__Group__0)
		{ after(grammarAccess.getTransitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateOn
entryRuleStateOn
:
{ before(grammarAccess.getStateOnRule()); }
	 ruleStateOn
{ after(grammarAccess.getStateOnRule()); } 
	 EOF 
;

// Rule StateOn
ruleStateOn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateOnAccess().getGroup()); }
		(rule__StateOn__Group__0)
		{ after(grammarAccess.getStateOnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateOff
entryRuleStateOff
:
{ before(grammarAccess.getStateOffRule()); }
	 ruleStateOff
{ after(grammarAccess.getStateOffRule()); } 
	 EOF 
;

// Rule StateOff
ruleStateOff 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateOffAccess().getGroup()); }
		(rule__StateOff__Group__0)
		{ after(grammarAccess.getStateOffAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateFinal
entryRuleStateFinal
:
{ before(grammarAccess.getStateFinalRule()); }
	 ruleStateFinal
{ after(grammarAccess.getStateFinalRule()); } 
	 EOF 
;

// Rule StateFinal
ruleStateFinal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateFinalAccess().getGroup()); }
		(rule__StateFinal__Group__0)
		{ after(grammarAccess.getStateFinalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFSMAccess().getGroup_2_0()); }
		(rule__FSM__Group_2_0__0)
		{ after(grammarAccess.getFSMAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getFSMAccess().getGroup_2_1()); }
		(rule__FSM__Group_2_1__0)
		{ after(grammarAccess.getFSMAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getStateOnParserRuleCall_0()); }
		ruleStateOn
		{ after(grammarAccess.getStateAccess().getStateOnParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStateAccess().getStateOffParserRuleCall_1()); }
		ruleStateOff
		{ after(grammarAccess.getStateAccess().getStateOffParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStateAccess().getStateFinalParserRuleCall_2()); }
		ruleStateFinal
		{ after(grammarAccess.getStateAccess().getStateFinalParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group__0__Impl
	rule__FSM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getFSMKeyword_0()); }
	'FSM'
	{ after(grammarAccess.getFSMAccess().getFSMKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group__1__Impl
	rule__FSM__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getNameAssignment_1()); }
	(rule__FSM__NameAssignment_1)
	{ after(grammarAccess.getFSMAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getAlternatives_2()); }
	(rule__FSM__Alternatives_2)*
	{ after(grammarAccess.getFSMAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FSM__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group_2_0__0__Impl
	rule__FSM__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getStateAssignment_2_0_0()); }
	(rule__FSM__StateAssignment_2_0_0)
	{ after(grammarAccess.getFSMAccess().getStateAssignment_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getGroup_2_0_1()); }
	(rule__FSM__Group_2_0_1__0)*
	{ after(grammarAccess.getFSMAccess().getGroup_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FSM__Group_2_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group_2_0_1__0__Impl
	rule__FSM__Group_2_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getCommaKeyword_2_0_1_0()); }
	','
	{ after(grammarAccess.getFSMAccess().getCommaKeyword_2_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group_2_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getStateAssignment_2_0_1_1()); }
	(rule__FSM__StateAssignment_2_0_1_1)
	{ after(grammarAccess.getFSMAccess().getStateAssignment_2_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FSM__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group_2_1__0__Impl
	rule__FSM__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getTransitionKeyword_2_1_0()); }
	'Transition'
	{ after(grammarAccess.getFSMAccess().getTransitionKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group_2_1__1__Impl
	rule__FSM__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getTransitionAssignment_2_1_1()); }
	(rule__FSM__TransitionAssignment_2_1_1)
	{ after(grammarAccess.getFSMAccess().getTransitionAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getGroup_2_1_2()); }
	(rule__FSM__Group_2_1_2__0)*
	{ after(grammarAccess.getFSMAccess().getGroup_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FSM__Group_2_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group_2_1_2__0__Impl
	rule__FSM__Group_2_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getCommaKeyword_2_1_2_0()); }
	','
	{ after(grammarAccess.getFSMAccess().getCommaKeyword_2_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FSM__Group_2_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__Group_2_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFSMAccess().getTransitionAssignment_2_1_2_1()); }
	(rule__FSM__TransitionAssignment_2_1_2_1)
	{ after(grammarAccess.getFSMAccess().getTransitionAssignment_2_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getNameAssignment_0()); }
	(rule__Transition__NameAssignment_0)
	{ after(grammarAccess.getTransitionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getSourceAssignment_1()); }
	(rule__Transition__SourceAssignment_1)
	{ after(grammarAccess.getTransitionAccess().getSourceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getSpaceEqualsSignGreaterThanSignSpaceKeyword_2()); }
	' => '
	{ after(grammarAccess.getTransitionAccess().getSpaceEqualsSignGreaterThanSignSpaceKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getTargetAssignment_3()); }
	(rule__Transition__TargetAssignment_3)
	{ after(grammarAccess.getTransitionAccess().getTargetAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateOn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateOn__Group__0__Impl
	rule__StateOn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateOnAccess().getStateOnAction_0()); }
	()
	{ after(grammarAccess.getStateOnAccess().getStateOnAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateOn__Group__1__Impl
	rule__StateOn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateOnAccess().getStateOnKeyword_1()); }
	'StateOn'
	{ after(grammarAccess.getStateOnAccess().getStateOnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateOn__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateOnAccess().getNameAssignment_2()); }
	(rule__StateOn__NameAssignment_2)
	{ after(grammarAccess.getStateOnAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateOff__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateOff__Group__0__Impl
	rule__StateOff__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOff__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateOffAccess().getStateOffAction_0()); }
	()
	{ after(grammarAccess.getStateOffAccess().getStateOffAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOff__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateOff__Group__1__Impl
	rule__StateOff__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOff__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateOffAccess().getStateOffKeyword_1()); }
	'StateOff'
	{ after(grammarAccess.getStateOffAccess().getStateOffKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOff__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateOff__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOff__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateOffAccess().getNameAssignment_2()); }
	(rule__StateOff__NameAssignment_2)
	{ after(grammarAccess.getStateOffAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateFinal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateFinal__Group__0__Impl
	rule__StateFinal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFinal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateFinalAccess().getStateFinalAction_0()); }
	()
	{ after(grammarAccess.getStateFinalAccess().getStateFinalAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFinal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateFinal__Group__1__Impl
	rule__StateFinal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFinal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateFinalAccess().getStateFinalKeyword_1()); }
	'StateFinal'
	{ after(grammarAccess.getStateFinalAccess().getStateFinalKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFinal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateFinal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFinal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateFinalAccess().getNameAssignment_2()); }
	(rule__StateFinal__NameAssignment_2)
	{ after(grammarAccess.getStateFinalAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FSM__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFSMAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getFSMAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__StateAssignment_2_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFSMAccess().getStateStateParserRuleCall_2_0_0_0()); }
		ruleState
		{ after(grammarAccess.getFSMAccess().getStateStateParserRuleCall_2_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__StateAssignment_2_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFSMAccess().getStateStateParserRuleCall_2_0_1_1_0()); }
		ruleState
		{ after(grammarAccess.getFSMAccess().getStateStateParserRuleCall_2_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__TransitionAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFSMAccess().getTransitionTransitionParserRuleCall_2_1_1_0()); }
		ruleTransition
		{ after(grammarAccess.getFSMAccess().getTransitionTransitionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FSM__TransitionAssignment_2_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFSMAccess().getTransitionTransitionParserRuleCall_2_1_2_1_0()); }
		ruleTransition
		{ after(grammarAccess.getFSMAccess().getTransitionTransitionParserRuleCall_2_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getNameEStringParserRuleCall_0_0()); }
		ruleEString
		{ after(grammarAccess.getTransitionAccess().getNameEStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__SourceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getSourceStateCrossReference_1_0()); }
		(
			{ before(grammarAccess.getTransitionAccess().getSourceStateEStringParserRuleCall_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getTransitionAccess().getSourceStateEStringParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getTransitionAccess().getSourceStateCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__TargetAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getTargetStateCrossReference_3_0()); }
		(
			{ before(grammarAccess.getTransitionAccess().getTargetStateEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getTransitionAccess().getTargetStateEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getTransitionAccess().getTargetStateCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOn__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateOnAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getStateOnAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOff__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateOffAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getStateOffAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFinal__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateFinalAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getStateFinalAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
